Episode 2

- Npm manages packages but this is not node package manager
- Json file is basically configuration for a npm
- create-react-app use webpack behind the scene
- In node modules every package has its own package.json and has its own transitive dependency.
- Parcel is a bundler like webpack, vite. Parcel is make minified version
- npm install -D parcel => what is mean by -D => there are two type of dependencies 1) dev 2) normal so its mean we install parcel with dev dependencies
- ^2.8.0 => ^ mean caret symbol => it will automatically upgrade the minor versions like 2.8.1 2.8.2 but ~ will upgrade major version like 2.9.1, 3.0.1
- Package-lock.json keep track of exact version of package
- Transitive dependencies => this mean one package depend on other packages so on ......
- npx executing the package but npm is installing the package so thats a difference between them
- npx parcel index.html => parcel goes to index.html and build a development build and host it to localhost:1234
- Cdn links are not the recommeded way because fetching resource from cdn is costly for us
- Install react to remove cdn link => npm install react
- Install react dom to remove cdn link => npm install react-dom
- In normal javascript we can't import or export files
- React is not just fast there are other bundlers which make react fast like parcel and others
Parcel Usage
- Dev build
- Local Server
- Hot module replacement(automatically refresh)
- File watching algo
- Caching build
- Image optimization
- Minification
- Compressing
- Differential bundling => support  older browser
- Error handling


Episode 3

- Whenever you clone project and want to start project you just need to go to package.json and 
check scripts
- npm run start = npm start
- In react we have elements which are equal to DOM elements
- React.createElement => this will basically create the object => when we render this element on Dom then it becomes the html element
- React.createRoot => whatever happen in dom it will happen under root
- JSX => javascript syntax => its not a part of react => this is not html its syntax like html but not html
- JSX converted to React.createElement => if you console both then both will return same object
- Parcel convert JSX into javascript => transpiled by Babel => Parcel assign job to Babel
- JSX => React.createElement => React Element object => HTML Element
- Babel transpiled ES6 code for old browser
- Wrap jsx in brackets if you write multiple line code
- Extensions => prettier, Bracket pair colorization toggler, es lint, better comment
- Everything in React is component => there are two types of components
1) class base components 2) functional components
- React functional components are just javascript functions which returns some jsx elements
- Functional components is a simple javascript function which returns some jsx elements or react element (definition)
- Component composition => component inside a component
const a = () => {
    return "First component"
}
const b = () => {
    <a />
    return "Second Component"
}
Alternative old syntax
const c = function () {
    return (
        <h1> hello world </h1>
    )
}

- In JSX if you place curly bracket in that curly bracket you can place any core javascript expression
- If attacker add some script (cross browser origin) jsx takes care of these attacks 
it will escape things mean sanitizes any piece of code





