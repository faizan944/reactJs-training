Episode 2

- Npm manages packages but this is not node package manager
- Json file is basically configuration for a npm
- create-react-app use webpack behind the scene
- In node modules every package has its own package.json and has its own transitive dependency.
- Parcel is a bundler like webpack, vite. Parcel is make minified version
- npm install -D parcel => what is mean by -D => there are two type of dependencies 1) dev 2) normal so its mean we install parcel with dev dependencies
- ^2.8.0 => ^ mean caret symbol => it will automatically upgrade the minor versions like 2.8.1 2.8.2 but ~ will upgrade major version like 2.9.1, 3.0.1
- Package-lock.json keep track of exact version of package
- Transitive dependencies => this mean one package depend on other packages so on ......
- npx executing the package but npm is installing the package so thats a difference between them
- npx parcel index.html => parcel goes to index.html and build a development build and host it to localhost:1234
- Cdn links are not the recommeded way because fetching resource from cdn is costly for us
- Install react to remove cdn link => npm install react
- Install react dom to remove cdn link => npm install react-dom
- In normal javascript we can't import or export files
- React is not just fast there are other bundlers which make react fast like parcel and others
Parcel Usage
- Dev build
- Local Server
- Hot module replacement(automatically refresh)
- File watching algo
- Caching build
- Image optimization
- Minification
- Compressing
- Differential bundling => support  older browser
- Error handling


Episode 3

- Whenever you clone project and want to start project you just need to go to package.json and 
check scripts
- npm run start = npm start
- In react we have elements which are equal to DOM elements
- React.createElement => this will basically create the object => when we render this element on Dom then it becomes the html element
- React.createRoot => whatever happen in dom it will happen under root
- JSX => javascript syntax => its not a part of react => this is not html its syntax like html but not html
- JSX converted to React.createElement => if you console both then both will return same object
- Parcel convert JSX into javascript => transpiled by Babel => Parcel assign job to Babel
- JSX => React.createElement => React Element object => HTML Element
- Babel transpiled ES6 code for old browser
- Wrap jsx in brackets if you write multiple line code
- Extensions => prettier, Bracket pair colorization toggler, es lint, better comment
- Everything in React is component => there are two types of components
1) class base components 2) functional components
- React functional components are just javascript functions which returns some jsx elements
- Functional components is a simple javascript function which returns some jsx elements or react element (definition)
- Component composition => component inside a component
const a = () => {
    return "First component"
}
const b = () => {
    <a />
    return "Second Component"
}
Alternative old syntax
const c = function () {
    return (
        <h1> hello world </h1>
    )
}

- In JSX if you place curly bracket in that curly bracket you can place any core javascript expression
- If attacker add some script (cross browser origin) jsx takes care of these attacks 
it will escape things mean sanitizes any piece of code

Episode 4

- If we want to pass data from component to another this is called props (you can call it arguments to a function)
- Whenever you want to pass dynamic data to component then you will use props
- You can pass any number of props react will wrap it as object
- Some cool developer :D destructing the props
- Config driven UI => that your UI driven by config and these config come from backend
Suppose if you want to different banners in Lahore and different in ISb this concept is called config driven UI
- When you are develop large application you have to put all image in cdn
- key in component while looping using map is reserved word
- key => using key react will optimize its rendering cycle. these keys should have unique id 
- Never use index as key => use index as key is anti pattern(read documentation) 
{lists.map((list, index) => {<component key={index} />})}


Episode 5

- There are two types of import and export
1) Default Import/export

export default component
import component from '../path';

2) Named Import/export

export const component;
import {component} from '../path';

- can I use together name or default together 
Answer => yes we can it's important to note that using both named and default exports in the same file can be considered an anti-pattern.
export const foo = 'foo';

// Named export
export const bar = 'bar';

// Default export
export default function() {
    console.log('This is the default function');
}

import defaultFunction, { foo, bar } from './example';

Using a combination of named and default exports can be appropriate in certain situations, 
such as when you have a module that exports a primary function or class as the default export, 
and also exports additional utility functions or constants as named exports.
- Your component should not be more than 100 lines
- React is fast in DOM manipulation => because Virtual DOM
- How do update the UI => state variable 
- To use state we will use Hooks => React hook is normal javascript utility function
- There are two important hooks useState, useEffect
- UseState => maintain the state of the component
- const [listOfRes, setListOfRes] = useState() => in useState() we give default value like useState(null)
- const [listOfRes, setListOfRes] = arr => const listOfRes = arr[0], const setListOfRes = arr[1] (this is called array destructing)
- In useState seconf variable is use to update the variable
- Whenever the state variable updates the react rerender the component
React reconciliation algo(React Fiber)
We have DOM(also called rest container) now we will filter our listing
React create a Virtual DOM(respresentation of actual DOM) now what is Virtual DOM 
Virtual Dom is a react object suppose if you console.log(<Body />) So basically virtual DOM is normal react object
Diff Algo is find out the difference between the virtual updated DOM vs virtual old DOM then it will update the actual DOM
Whenever something change in UI its calleed react reconciliation
React is fast because it differentiate between two objects which is called virtual DOM
Suppose when we filter out our listing it create new object and react find out the difference by comparing objects 
and then it actually update the DOM it does not touch the html lot (Thats why react is fast)
In interview Why react is fast
Ans => React is doing efficient DOM manipulation because of virtual DOM(because of diff algo and reconciliation)


Episode 6

- In useEffect hook we have two paramters 
1) Callback function
2) Dependency
So how code is work => when the body function is called it render UI then useEffect will call
If you have to do something after rendering the component you have to use useEffect
Code wise first return call in function then useEffect
Again first whole component even console.log out side the useEffect will render first then useEffect will trigger
useEffect is used to implement this approach => loads -> render -> API -> render Again
